{"version":3,"sources":["components/widgets/ModalDialog.js","components/Header.js","components/Home.js","components/About.js","components/SignIn.js","components/App.js","serviceWorker.js","index.js"],"names":["ModalDialog","props","React","useState","show","setShow","handleClose","signOut","userSignOut","to","className","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","userName","firebase","auth","then","this","history","push","catch","error","Home","About","SignIn","uiConfig","signInFlow","signInSuccessUrl","signInOptions","GoogleAuthProvider","PROVIDER_ID","EmailAuthProvider","callbacks","signInSuccessWithAuthResult","useEffect","onAuthStateChanged","user","signUp","firebaseAuth","initializeApp","apiKey","authDomain","App","setUserName","isLoaded","setIsLoaded","displayName","path","exact","render","component","format","ticking","type","color","height","width","timeout","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8aee3ea0.chunk.js","sourcesContent":["import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport {Link} from 'react-router-dom';\n\nfunction ModalDialog(props) {\n    const [show, setShow] = React.useState(false);\n\n    const handleClose = (signOut) => {\n        setShow(false);\n        if(signOut) props.userSignOut();\n    }\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n            <Link to={\"/\"} className=\"nav-link\">\n                <li className=\"nav-item\" onClick={handleShow}>LogOut</li>\n            </Link>\n            <Modal show={show} onHide={() => handleClose(false)}>\n                <Modal.Header closeButton>\n                    <Modal.Title >Log Out</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>Are you sure?</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => handleClose(false)}>\n                        No\n                    </Button>\n                    <Button variant=\"primary\" onClick={() => handleClose(true)}>\n                        Yes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n\nexport default ModalDialog;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport firebase from \"firebase\";\nimport ModalDialog from \"./widgets/ModalDialog\";\n\nfunction Header(props) {\n\n    const userSignOut = () => {\n        firebase.auth().signOut().then(function() {\n            props.signOut();\n            this.props.history.push('/');\n        }).catch(function(error) {\n            // An error happened.\n        });\n    }\n    return (\n        <nav className=\"navbar navbar-expand-md navbar-fixed-top navbar-dark bg-dark main-nav app-width\">\n            <ul className=\"nav navbar-nav\">\n                <Link to={\"/\"} className=\"nav-link\">\n                    <li>Home</li>\n                </Link>\n                <Link to={\"/about\"} className=\"nav-link\">\n                    <li className=\"nav-item\">About</li>\n                </Link>\n            </ul>\n            {!props.userName ?\n            <div className=\"ml-auto nav-content order-3 order-md-3\">\n                <ul className=\"ml-auto nav navbar-nav\">\n                    <Link to={\"/signin\"} className=\"nav-link\">\n                        <li className=\"nav-item\">SignIn</li>\n                    </Link>\n                    <Link to={\"/signup\"} className=\"nav-link\">\n                        <li className=\"nav-item\">SignUp</li>\n                    </Link>\n                </ul>\n            </div>\n                :\n                <div className=\"ml-auto nav-content order-3 order-md-3\">\n                    <ul className=\"ml-auto nav navbar-nav\">\n                        <li className=\"nav-item text-white-50 nav-link\">{props.userName}</li>\n                        <ModalDialog userSignOut={userSignOut}/>\n                    </ul>\n                </div>}\n        </nav>\n    );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Home(props) {\n    return (\n        <div className=\"container\">\n            <div className=\"d-flex justify-content-center\">\n                <h3>Home</h3>\n            </div>\n            {props.userName\n                ?\n                <div className=\"d-flex justify-content-center\">\n                    <p>Welcome, {props.userName}!</p>\n                </div>\n                :\n                <div className=\"d-flex justify-content-center\">\n                    <p>Please Log In!</p>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nfunction About() {\n    return (\n        <div className=\"container\">\n            <div className=\"d-flex justify-content-center\">\n                <h3>About</h3>\n            </div>\n        </div>\n    );\n}\n\nexport default About;","import React from 'react';\nimport firebase from \"firebase\";\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\n\nfunction SignIn(props) {\n\n    const uiConfig = {\n        // Popup signin flow rather than redirect flow.\n        signInFlow: 'popup',\n        // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n        signInSuccessUrl: '/',\n        // We will display Google and Facebook as auth providers.\n        signInOptions: [\n            firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n            firebase.auth.EmailAuthProvider.PROVIDER_ID\n        ],\n        callbacks: {\n            // Avoid redirects after sign-in.\n            signInSuccessWithAuthResult: () => false\n        }\n    };\n\n    // Listen to the Firebase Auth state and set the local state.\n    React.useEffect(() => {\n        firebase.auth().onAuthStateChanged(\n            (user) => {\n                if(user != null){\n                    props.history.push('/');\n                }\n            }\n        );\n    }, [props]);\n    return (\n        <div className=\"container\">\n            <div className=\"d-flex justify-content-center\">\n                {props.signUp ? <h3>SignUp</h3> : <h3>SignIn</h3>}\n            </div>\n            <div className=\"d-flex justify-content-center\">\n                <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()}/>\n            </div>\n        </div>\n    );\n}\n\nexport default SignIn;","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport firebase from \"firebase\";\nimport Loader from 'react-loader-spinner';\nimport Clock from 'react-live-clock';\n\nimport Header from './Header';\nimport Home from './Home';\nimport About from './About';\nimport SignIn from './SignIn';\n\n// Configure Firebase.\nconst config = {\n    apiKey: 'AIzaSyBiTApoj94gTDS_tPsXf_ACdvtA466j72E',\n    authDomain: 'route-and-log.firebaseapp.com'\n};\nfirebase.initializeApp(config);\n\nfunction App() {\n    const [userName, setUserName] = React.useState(false);\n    const [isLoaded, setIsLoaded] = React.useState(false);\n    React.useEffect(() => {\n        firebase.auth().onAuthStateChanged((user) => {\n            setIsLoaded(true);\n            if(user != null) setUserName(user.displayName);\n        });\n    }, []);\n\n    const signOut = () => {\n        setUserName(false);\n    }\n\n    if (!isLoaded) {\n        return(\n                <div className=\"d-flex justify-content-center align-items-center\">\n                    <Loader\n                        type=\"Circles\"\n                        color=\"#00BFFF\"\n                        height={100}\n                        width={100}\n                        timeout={0}\n                    />\n                </div>\n        );\n    }\n    return (\n            <div className=\"container\">\n                <Router>\n                    <div className=\"row\">\n                        <Header userName={userName} signOut={signOut}/>\n                    </div>\n                    <Route path={\"/\"} exact render={(props) => <Home userName={userName}/>}/>\n                    <Route path={\"/about\"} component={About}/>\n                    <Route path={\"/signin\"} component={SignIn}/>\n                    <Route path={\"/signup\"} render={(props) => <SignIn {...props} signUp={true}/>}/>\n                </Router>\n                <div className=\"navbar fixed-bottom container bg-dark\">\n                    <div></div>\n                    <div className=\"text-white\">\n                        <Clock  format={'dddd, MMMM Mo, YYYY, h:mm:ss A'} ticking={true}/>\n                    </div>\n                </div>\n            </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}